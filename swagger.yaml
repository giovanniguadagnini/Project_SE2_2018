swagger: "2.0"
info:
  description: "This is the API documentation of a RESTful web service, implemented
  in order to sustain the Software Engineering II exam at University of Trento.
  This API enables teachers to test the knowledge of their students by assigning
  them some tasks to do. There will also be some features in order to eventually
  perform a peer review session on some task"
  version: "1.0.0"
  title: "ExamsAPI - Project_SE2_2018"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "giovanni.guadagnini@studenti.unitn.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "teamrocketproject.herokuapp.com"
basePath: "/"
tags:
- name: "Exam"
  description: "Operations delegated to exam management"
- name: "User"
  description: "Operations delegated to user management"
- name: "Task"
  description: "Define generic tasks that will be assigned in the future tests"
- name: "DeliverTasks"
  description: "Define the task and the option related the question that the student must answer"
schemes:
- "https"
paths:
  /exams:
    post:
      tags:
      - "Exam"
      summary: "Add a new exam"
      description: ""
      operationId: "addExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        405:
          description: "Invalid input"
    put:
      tags:
      - "Exam"
      summary: "Update an existing exam"
      description: ""
      operationId: "updateExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "Exam"
      summary: "Get all the manageable exams"
      description: ""
      operationId: "getExams"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exam"
        400:
          description: "Bad request"
  /exams/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The exam ID
    get:
      tags:
      - "Exam"
      summary: "Get an exam by ID"
      description: ""
      operationId: "getExam"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "Exam"
      summary: "Delete an exam by ID"
      description: ""
      operationId: "deleteExam"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
  /users:
    post:
      tags:
      - "User"
      summary: "Register as a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that represents the profile newly registered user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        405:
          description: "Invalid input"
    get:
      tags:
      - "User"
      summary: "Return the list of users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
            description: "Successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Find user by ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "User"
      summary: "Update user informations"
      description: ""
      operationId: "updateUserByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "User"
      summary: "Delete user with given ID"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /tasks:
    post:
      tags:
      - "Task"
      summary: "Create a new task"
      description: ""
      operationId: "createTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that is going to be created"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        405:
          description: "Invalid input"
    put:
      tags:
      - "Task"
      summary: "Update an existing task"
      description: ""
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "Exam"
      summary: "Get all the manageable task"
      description: ""
      operationId: "getTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "Bad request"
  /tasks/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The task ID
    get:
      tags:
      - "Task"
      summary: "Get a task by ID"
      description: ""
      operationId: "getTask"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "Task"
      summary: "Delete a task by ID"
      description: ""
      operationId: "deleteTask"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
  /deliver_tasks:
    put:
      tags:
      - "DeliverTasks"
      summary: "Update an existing DeliverTasks"
      description: ""
      operationId: "updateDeliverTasks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DeliverTasks object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/DeliverTasks"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/DeliverTasks"
        400:
          description: "Invalid ID"
        404:
          description: "DeliverTasks not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "DeliverTasks"
      summary: "Get all the manageable DeliverTasks"
      description: ""
      operationId: "getDeliverTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DeliverTasks"
        400:
          description: "Bad request"
  /deliver_tasks/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The DeliverTasks ID
    get:
      tags:
      - "DeliverTasks"
      summary: "Get a DeliverTasks by ID"
      description: ""
      operationId: "getDeliverTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DeliverTasks"
        400:
          description: "Invalid ID"
        404:
          description: "DeliverTasks not found"
        405:
          description: "Validation exception"
    put:
      tags:
      - "DeliverTasks"
      summary: "Update a DeliverTasks by ID"
      description: ""
      operationId: "updateDeliverTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/DeliverTasks"
        400:
          description: "Invalid ID"
        404:
          description: "DeliverTasks not found"
        405:
          description: "Validation exception"        

definitions:
  Exam:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Git & collab - midterm test"
      owner:
        type: "integer"
        format: "int64"
      teachers:
        type: "array"
        items:
          $ref: "#/definitions/User"
      students:
        type: "array"
        items:
          $ref: "#/definitions/User"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      deadline:
        type: "integer"
        format: "int64"
      reviewable:
        type: "boolean"
      num_shuffle:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Bob"
      surname:
        type: "string"
        format: "Strongman"
      email:
        type: "string"
        format: "bob.strongman@studenti.unitn.it"
      born:
        $ref: "#/definitions/Datetime"
      enrolment:
        $ref: "#/definitions/Datetime"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/DeliverTasks"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      owner:
        $ref: "#/definitions/User"
      task_type:
        type: "string"
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
  DeliverTasks:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      task_type:
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
      answer:
        type: "string"
      id_user:
        type: "integer"
        format: "int64"
      id_exam:
        type: "integer"
        format: "int64"
      completed:
        type: "boolean"
      comment_peer:
        type: "array"
        items:
          type: "string"
      comment:
        type: "string"
      mark:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 31
      started:
        $ref: "#/definitions/Datetime"
      finished:
        $ref: "#/definitions/Datetime"
  Datetime:
    type: "object"
    properties:
      year:
        type: "integer"
        format: "int64"
        minimum: 1900
      month:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 12
      day:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 31
      hour:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 23
      minute:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60
      second:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60