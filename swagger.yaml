swagger: "2.0"
info:
  description: >
    This is the API documentation of a RESTful web service, implemented
    in order to sustain the Software Engineering II exam at University of Trento.

    #####Description

    This API enables teachers to test the knowledge of their students by assigning
    them some tasks to do. There will also be some features in order to eventually
    perform a peer review session on some task
  version: "1.0.0"
  title: "EsAPI"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "giovanni.guadagnini@studenti.unitn.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "teamrocketproject.herokuapp.com"
basePath: "/"
tags:
- name: "Exam"
  description: "Operations delegated to exam management"
- name: "User"
  description: "Operations delegated to user management"
- name: "UserGroup"
  description: "Operations that allow to manage groups of users"
- name: "Task"
  description: "Define generic tasks that will be assigned in the future tests"
- name: "Submission"
  description: "These are the actual question objects the students must answer; also used for evaluation & peer-review"
schemes:
- "https"
paths:
  /exams:
    post:
      tags:
      - "Exam"
      summary: "Add a new exam"
      description: "Performed by a teacher when he wants to create a new exam that will be prompted to the students ( all of them will be specified internally in the resource that will be created to represent the exam )"
      operationId: "addExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        405:
          description: "Invalid input"
    put:
      tags:
      - "Exam"
      summary: "Update an existing exam"
      description: "Performed by a teacher in order to change the exam's specification"
      operationId: "updateExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "Exam"
      summary: "Get all the manageable exams"
      description: "Performed by a teacher in order to get all the info about the exams he has requested to do"
      operationId: "getExams"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exam"
        400:
          description: "Bad request"
  /exams/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The exam ID
    get:
      tags:
      - "Exam"
      summary: "Get an exam by ID"
      description: "Performed by the teacher in order to get specific info about an exam"
      operationId: "getExam"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "Exam"
      summary: "Delete an exam by ID"
      description: "Performed by the teacher, when some older or not reliable data about an exam are not necessary anymore"
      operationId: "deleteExam"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
  /users:
    post:
      tags:
      - "User"
      summary: "Register as a new user"
      description: "One time thing in order to register itself into the application and use it"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that represents the profile newly registered user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        405:
          description: "Invalid input"
    get:
      tags:
      - "User"
      summary: "Return the list of users"
      description: "Every user can see a complete list of users that are related to them in some ways (teachers and/or students)"
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
            description: "Successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
  /users/{id}:
    get:
      tags:
      - "User"
      summary: "Find user by ID"
      description: "Could be performed by the user itself which wants to see its own profile, but also from other users that has the right to inspect other profile's data"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "User"
      summary: "Update user informations"
      description: "Performed by the user itself which wants to update its own profile"
      operationId: "updateUserByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "User"
      summary: "Delete user with given ID"
      description: "Performed by the user itself which wants to delete its own profile"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /userGroups:
    get:
      tags:
      - "UserGroup"
      summary: "Return the list of all the different user groups"
      description: "Could be performed by any user, obtaining just basic info about all the grouping of user"
      operationId: "getUserGroups"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/UserGroup"
  /tasks:
    post:
      tags:
      - "Task"
      summary: "Create a new task"
      description: "Performed by the TA in order to add a new task template, in order to use it in future exams"
      operationId: "createTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that is going to be created"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        405:
          description: "Invalid input"
    get:
      tags:
      - "Exam"
      summary: "Get all the manageable task"
      description: "Performed by the TA in order to get all the info about the task templates he/she can see & manage"
      operationId: "getTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "Bad request"
  /tasks/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The task ID
    get:
      tags:
      - "Task"
      summary: "Get a task by ID"
      description: "Performed by the TA in order to get specific info about a task template"
      operationId: "getTask"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
    put:
      tags:
      - "Task"
      summary: "Update an existing task"
      description: "Useful when the teacher wants to modify a specific task template, so the question will be more appropriately prompted in future exams"
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Task object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "Task"
      summary: "Delete a task by ID"
      description: "Useful when the teacher wants to delete a specific task template, so that cannot be used in future exams"
      operationId: "deleteTask"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID"
        404:
          description: "Task not found"
        405:
          description: "Validation exception"
  /submissions:
    get:
      tags:
      - "Submission"
      summary: "Get all the manageable Submissions"
      description: "This API will allow to retrieve all the delivered task that the TA or the student has the right to see"
      operationId: "getDeliverTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"
        400:
          description: "Bad request"
  /submissions/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The Submission ID
    get:
      tags:
      - "Submission"
      summary: "Get a Submission by ID"
      description: "It'll be performed in order to retrieve a specific delivered task"
      operationId: "getDeliverTasks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID"
        404:
          description: "Submission not found"
        405:
          description: "Validation exception"
    put:
      tags:
      - "Submission"
      summary: "Update a Submission by ID"
      description: "Useful when the student wants to upload his answer, but also when the TA wants to put a mark & comment to the task"
      operationId: "updateSubmission"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: "Invalid ID"
        404:
          description: "Submission not found"
        405:
          description: "Validation exception"

definitions:
  Exam:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Git & collab - midterm test"
      owner:
        type: "integer"
        format: "int64"
      teachers:
        type: "array"
        items:
          $ref: "#/definitions/User"
      students:
        $ref: "#/definitions/UserGroup"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      submissions:
        type: "array"
        items:
          $ref: "#/definitions/Submission"
      deadline:
        type: "integer"
        format: "int64"
      reviewable:
        type: "boolean"
      num_shuffle:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Bob"
      password:
        type: "string"
      surname:
        type: "string"
        format: "Strongman"
      email:
        type: "string"
        format: "bob.strongman@studenti.unitn.it"
      born:
        $ref: "#/definitions/Datetime"
      enrolment:
        $ref: "#/definitions/Datetime"
      submissions:
        type: "array"
        items:
          $ref: "#/definitions/Submission"
  UserGroup:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "1^ ICT students"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      owner:
        $ref: "#/definitions/User"
      task_type:
        type: "string"
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
  Submission:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      task_type:
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
      answer:
        type: "string"
      id_user:
        type: "integer"
        format: "int64"
      id_exam:
        type: "integer"
        format: "int64"
      completed:
        type: "boolean"
      comment_peer:
        type: "array"
        items:
          type: "string"
      comment:
        type: "string"
      mark:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 31
      started:
        $ref: "#/definitions/Datetime"
      finished:
        $ref: "#/definitions/Datetime"
  Datetime:
    type: "object"
    properties:
      year:
        type: "integer"
        format: "int64"
        minimum: 1900
      month:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 12
      day:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 31
      hour:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 23
      minute:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60
      second:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60