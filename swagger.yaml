swagger: "2.0"
info:
  description: "This is the API documentation of a RESTful web service, implemented
  in order to sustain the Software Engineering II exam at University of Trento.
  This API enables teachers to test the knowledge of their students by assigning 
  them some tasks to do. There will also be some features in order to eventually 
  perform a peer review session on some task"
  version: "1.0.0"
  title: "ExamsAPI - Project_SE2_2018"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "giovanni.guadagnini@studenti.unitn.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "teamrocketproject.herokuapp.com"
basePath: "/"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
paths:
  /exams:
    post:
      tags:
      - "exams"
      summary: "Add a new exam"
      description: ""
      operationId: "addExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        405:
          description: "Invalid input"
    put:
      tags:
      - "exams"
      summary: "Update an existing exam"
      description: ""
      operationId: "updateExam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exam object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Exam"
      responses:
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "exams"
      summary: "Get all the exams that i could manage"
      description: ""
      operationId: "getExams"
      produces:
      - "application/json"
      responses:
        400:
          description: "Bad request"
  /exams/{id}:
    parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The exam ID
    get:
      tags:
      - "exams"
      summary: "Get an exam by ID"
      description: ""
      operationId: "getExam"
      produces:
      - "application/json"
      responses:
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "exams"
      summary: "Delete an exam by ID"
      description: ""
      operationId: "deleteExam"
      produces:
      - "application/json"
      responses:
        400:
          description: "Invalid ID"
        404:
          description: "Exam not found"
        405:
          description: "Validation exception"
  /user:
    get:
      tags:
      - "user"
      summary: "Return the list of users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        200:
            description: "Successful operation"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user informations"
      description: ""
      operationId: "updateUserByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user with given ID"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
              type: "array"
              items:
                $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
definitions:
  Exam:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Git & collab - midterm test"
      owner:
        type: "integer"
        format: "int64"
      teachers:
        type: "array"
        items:
          $ref: "#/definitions/User"
      students:
        type: "array"
        items:
          $ref: "#/definitions/User"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      deadline:
        type: "integer"
        format: "int64"
      reviewable:
        type: "boolean"
      num_shuffle:
        type: "integer"
        format: "int64"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Bob"
      surname:
        type: "string"
        format: "Strongman"
      email:
        type: "string"
        format: "bob.strongman@studenti.unitn.it"
      born:
        $ref: "#/definitions/Datetime"
      enrolment:
        $ref: "#/definitions/Datetime"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/DeliverTask"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      task_type:
        type: "string"
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
  DeliverTask:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      task_type:
        enum: ["open", "single_c", "multiple_c", "submit"]
      question:
        type: "object"
      answer:
        type: "string"
      id_user:
        type: "integer"
        format: "int64"
      id_exam:
        type: "integer"
        format: "int64"
      completed:
        type: "boolean"
      comment_peer:
        type: "array"
        items:
          type: "string"
      comment:
        type: "string"
      mark:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 31
      started:
        $ref: "#/definitions/Datetime"
      finished:
        $ref: "#/definitions/Datetime"
  Datetime:        
    type: "object"
    properties:
      year:
        type: "integer"
        format: "int64"
        minimum: 1900
      month:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 12
      day:
        type: "integer"
        format: "int32"
        minimum: 1
        maximum: 31
      hour:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 23
      minute:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60
      second:
        type: "integer"
        format: "int32"
        minimum: 0
        maximum: 60